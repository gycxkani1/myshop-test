"""
Django settings for myshop project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import datetime
from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'iwrah6iu^hqc!c=be@7f#!6t_wdjm&3)(#ogwws@5u)pl7cc%&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app1',  # Your first app
    'app2',  # Your second app
    'app3',  # Your third app
    'app4',  # Your fourth app
    'app5',  # Your fifth app
    'app6',
    'app8',
    'app9',
    'rest_framework',  # 用于API开发的Django REST框架
    'django_filters',  # 用于在视图中过滤数据的Django筛选器
    'rest_framework.authtoken', # Django REST框架认证令牌中间件
    'corsheaders',  # CORS跨域请求的头部    


]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # CORS跨域请求中间件
    'django.middleware.security.SecurityMiddleware', # 安全中间件
    'django.contrib.sessions.middleware.SessionMiddleware', # 会话中间件
    'django.middleware.common.CommonMiddleware', # 通用中间件
    'django.middleware.csrf.CsrfViewMiddleware', # 跨域请求伪造保护中间件
    'django.contrib.auth.middleware.AuthenticationMiddleware', # 用户认证中间件
    'django.contrib.messages.middleware.MessageMiddleware', # 消息中间件
    'django.middleware.clickjacking.XFrameOptionsMiddleware', # 点击劫持
    'django.middleware.locale.LocaleMiddleware', # 本地化中间件
    
    # 'app6.middle.mymiddle.AuthMiddleware1', # 自定义中间件
    # 'app6.middle.mymiddle.AuthMiddleware2', # 自定义中间件
    # 'app6.middle.permmiddleware.PermissionMiddleWare', # 用中间件简化权限认证
]

ROOT_URLCONF = 'myshop.urls'

AUTH_USER_MODEL = "app6.MyUser" # 扩展用户模型
LOGIN_URL = '/app6/myuser_login/' # 登录页面路径

CORS_ALLOW_CREDENTIALS = True  # 跨域请求允许携带cookie
CORS_ORIGIN_ALLOW_ALL = True  # 允许所有域名跨域访问



TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Directory for templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',  # 添加媒体文件路径到上下文中

            ],
        },
    },
]

WSGI_APPLICATION = 'myshop.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
     'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'shop_test',
        'USER': 'root',
        'PASSWORD': 'root',
        'HOST': 'localhost',
        'PORT': '3306',
        #取消外键约束，否则多对多模型迁移报django.db.utils.IntegrityError: (1215, 'Cannot add foreign key constraint')
        'OPTIONS': {
            "init_command": "SET foreign_key_checks = 0;",
            'charset': 'utf8'
        },
    }

}

# 如果想查看在 ORM 转换过程中产生的SQL语句，可以设置logging的level为DEBUG，然后查看django.db.backends的日志。
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console':{
            'level':'DEBUG',
            'class':'logging.StreamHandler',
        },
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['console'],
            'propagate': True,
            'level':'DEBUG',
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'zh-hans'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)
STATIC_ROOT = os.path.join(BASE_DIR, '/static')


MEDIA_URL = '/media/'
MEDIA_DIR = os.path.join(BASE_DIR,'media')
MEDIA_ROOT = MEDIA_DIR



REST_FRAMEWORK = {
    # 全局分页配置
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # 'PAGE_SIZE': 2,

    # 过滤器默认配置
    'DEFAULT_FILTER_BACKENDS': (
           'django_filters.rest_framework.DjangoFilterBackend',
    ),
    # 全局认证类
     'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication', # 配置验证方式为JWT验证
        # 'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',  
        # 'rest_framework.authentication.TokenAuthentication', # 使用Token令牌的HTTP身份认证
    ),
    # 全局权限配置
     'DEFAULT_PERMISSION_CLASSES': (
        # 'rest_framework.permissions.IsAuthenticated', # 需要登录认证才能访问
    ),

     #不然会提示 'AutoSchema' object has no attribute 'get_link'
    'DEFAULT_SCHEMA_CLASS':'rest_framework.schemas.coreapi.AutoSchema',

    # 自定义异常处理函数
    'EXCEPTION_HANDLER': 'app8.customexception.custom_exception_handler'
    


}


JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=3),  # Token 过期时间为3天
    'JWT_AUTH_HEADER_PREFIX': 'JWT',  # Token的头为：JWT XXXXXXXXXXXXXXXXXXXXXX
    'JWT_ALLOW_REFRESH': False, # 是否允许刷新Token
    #自定义返回认证信息
    'JWT_RESPONSE_PAYLOAD_HANDLER':'app8.jwt_utils.jwt_response_payload_handler'
}


