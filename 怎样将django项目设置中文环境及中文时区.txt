在Django项目中设置中文环境和中文时区，可以通过以下几个步骤进行配置：

1. 设置LANGUAGE_CODE

在Django项目的settings.py文件中，设置LANGUAGE_CODE为'zh-hans'（简体中文）或者'zh-hant'（繁体中文），这表示你的项目将使用中文作为默认语言。

LANGUAGE_CODE = 'zh-hans'
2. 设置TIME_ZONE

在settings.py文件中，设置TIME_ZONE为你想要使用的时区。例如，如果你在中国，通常使用的是Asia/Shanghai。

TIME_ZONE = 'Asia/Shanghai'
3. 安装和使用Django的本地化中间件

确保在MIDDLEWARE设置中包含了Django的本地化中间件LocaleMiddleware。这个中间件用于处理本地化请求。

MIDDLEWARE = [
    ...
    'django.middleware.locale.LocaleMiddleware',
    ...
]
4. 配置本地化文件路径（可选）

如果你想支持多个语言，可以在项目的根目录下创建一个名为locale的文件夹，并在其中创建对应语言的翻译文件。例如，对于简体中文，你可以创建locale/zh_Hans/LC_MESSAGES/django.po和django.mo文件。你可以使用django-admin makemessages和django-admin compilemessages命令来生成这些文件。

5. 使用本地化URL路由（可选）

如果你希望根据用户的语言偏好来显示不同的页面，可以使用Django的本地化URL路由。例如：

from django.urls import path, include
from django.conf.urls.i18n import i18n_patterns
 
urlpatterns = [
    path('i18n/', include('django.conf.urls.i18n')),
] + i18n_patterns(
    path('', include('your_app.urls')),  # 注意这里的your_app应该替换为你的实际app名称
)
6. 设置模板语言（可选）

在模板中，你可以通过设置模板变量的语言来控制模板的显示语言。例如：

{% load i18n %}
{% get_current_language as LANGUAGE_CODE %}
<p>{% trans "Hello" %} {{ user.username }}</p>
7. 测试配置是否成功

启动你的Django项目并访问一些本地化的内容，例如翻译的字符串或者日期时间显示，以确保一切配置正确。你可以通过浏览器的开发者工具来检查页面是否正确显示了中文。

通过以上步骤，你应该能够成功设置Django项目的中文环境和中文时区。